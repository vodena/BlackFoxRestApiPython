# coding: utf-8

"""
    BlackFox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blackfox_restapi.models.range import Range  # noqa: F401,E501


class KerasLayerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activation_function': 'str',
        'ranges': 'list[Range]'
    }

    attribute_map = {
        'activation_function': 'activationFunction',
        'ranges': 'ranges'
    }

    def __init__(self, activation_function=None, ranges=None):  # noqa: E501
        """KerasLayerConfig - a model defined in Swagger"""  # noqa: E501

        self._activation_function = None
        self._ranges = None
        self.discriminator = None

        if activation_function is not None:
            self.activation_function = activation_function
        if ranges is not None:
            self.ranges = ranges

    @property
    def activation_function(self):
        """Gets the activation_function of this KerasLayerConfig.  # noqa: E501

        Layer activation function  # noqa: E501

        :return: The activation_function of this KerasLayerConfig.  # noqa: E501
        :rtype: str
        """
        return self._activation_function

    @activation_function.setter
    def activation_function(self, activation_function):
        """Sets the activation_function of this KerasLayerConfig.

        Layer activation function  # noqa: E501

        :param activation_function: The activation_function of this KerasLayerConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["SoftMax", "Elu", "Selu", "SoftPlus", "SoftSign", "ReLu", "TanH", "Sigmoid", "HardSigmoid", "Linear"]  # noqa: E501
        if activation_function not in allowed_values:
            raise ValueError(
                "Invalid value for `activation_function` ({0}), must be one of {1}"  # noqa: E501
                .format(activation_function, allowed_values)
            )

        self._activation_function = activation_function

    @property
    def ranges(self):
        """Gets the ranges of this KerasLayerConfig.  # noqa: E501


        :return: The ranges of this KerasLayerConfig.  # noqa: E501
        :rtype: list[Range]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this KerasLayerConfig.


        :param ranges: The ranges of this KerasLayerConfig.  # noqa: E501
        :type: list[Range]
        """

        self._ranges = ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KerasLayerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasLayerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
