# coding: utf-8

"""
    BlackFox

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from blackfox_restapi.configuration import Configuration


class RandomForestOptimizedModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'number_of_estimators': 'int',
        'max_depth': 'int',
        'max_features': 'int',
        'feature_selection': 'list[bool]'
    }

    attribute_map = {
        'id': 'id',
        'number_of_estimators': 'numberOfEstimators',
        'max_depth': 'maxDepth',
        'max_features': 'maxFeatures',
        'feature_selection': 'featureSelection'
    }

    def __init__(self, id=None, number_of_estimators=None, max_depth=None, max_features=None, feature_selection=None, local_vars_configuration=None):  # noqa: E501
        """RandomForestOptimizedModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._number_of_estimators = None
        self._max_depth = None
        self._max_features = None
        self._feature_selection = None
        self.discriminator = None

        self.id = id
        if number_of_estimators is not None:
            self.number_of_estimators = number_of_estimators
        if max_depth is not None:
            self.max_depth = max_depth
        if max_features is not None:
            self.max_features = max_features
        self.feature_selection = feature_selection

    @property
    def id(self):
        """Gets the id of this RandomForestOptimizedModel.  # noqa: E501

        Model id  # noqa: E501

        :return: The id of this RandomForestOptimizedModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RandomForestOptimizedModel.

        Model id  # noqa: E501

        :param id: The id of this RandomForestOptimizedModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number_of_estimators(self):
        """Gets the number_of_estimators of this RandomForestOptimizedModel.  # noqa: E501

        Number of estimators  # noqa: E501

        :return: The number_of_estimators of this RandomForestOptimizedModel.  # noqa: E501
        :rtype: int
        """
        return self._number_of_estimators

    @number_of_estimators.setter
    def number_of_estimators(self, number_of_estimators):
        """Sets the number_of_estimators of this RandomForestOptimizedModel.

        Number of estimators  # noqa: E501

        :param number_of_estimators: The number_of_estimators of this RandomForestOptimizedModel.  # noqa: E501
        :type: int
        """

        self._number_of_estimators = number_of_estimators

    @property
    def max_depth(self):
        """Gets the max_depth of this RandomForestOptimizedModel.  # noqa: E501

        Max depth of tree  # noqa: E501

        :return: The max_depth of this RandomForestOptimizedModel.  # noqa: E501
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this RandomForestOptimizedModel.

        Max depth of tree  # noqa: E501

        :param max_depth: The max_depth of this RandomForestOptimizedModel.  # noqa: E501
        :type: int
        """

        self._max_depth = max_depth

    @property
    def max_features(self):
        """Gets the max_features of this RandomForestOptimizedModel.  # noqa: E501

        Max features  # noqa: E501

        :return: The max_features of this RandomForestOptimizedModel.  # noqa: E501
        :rtype: int
        """
        return self._max_features

    @max_features.setter
    def max_features(self, max_features):
        """Sets the max_features of this RandomForestOptimizedModel.

        Max features  # noqa: E501

        :param max_features: The max_features of this RandomForestOptimizedModel.  # noqa: E501
        :type: int
        """

        self._max_features = max_features

    @property
    def feature_selection(self):
        """Gets the feature_selection of this RandomForestOptimizedModel.  # noqa: E501

        А bool value for each input indicating whether that input is significant  # noqa: E501

        :return: The feature_selection of this RandomForestOptimizedModel.  # noqa: E501
        :rtype: list[bool]
        """
        return self._feature_selection

    @feature_selection.setter
    def feature_selection(self, feature_selection):
        """Sets the feature_selection of this RandomForestOptimizedModel.

        А bool value for each input indicating whether that input is significant  # noqa: E501

        :param feature_selection: The feature_selection of this RandomForestOptimizedModel.  # noqa: E501
        :type: list[bool]
        """

        self._feature_selection = feature_selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RandomForestOptimizedModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RandomForestOptimizedModel):
            return True

        return self.to_dict() != other.to_dict()
