# coding: utf-8

"""
    BlackFox

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from blackfox_restapi.configuration import Configuration


class InputWindowRangeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'window': 'RangeInt',
        'shift': 'RangeInt',
        'step': 'RangeInt',
        'aggregation_types': 'list[AggregationType]'
    }

    attribute_map = {
        'window': 'window',
        'shift': 'shift',
        'step': 'step',
        'aggregation_types': 'aggregationTypes'
    }

    def __init__(self, window=None, shift=None, step=None, aggregation_types=["None","Avg","Sum"], local_vars_configuration=None):  # noqa: E501
        """InputWindowRangeConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._window = None
        self._shift = None
        self._step = None
        self._aggregation_types = None
        self.discriminator = None

        self.window = window
        self.shift = shift
        self.step = step
        self.aggregation_types = aggregation_types

    @property
    def window(self):
        """Gets the window of this InputWindowRangeConfig.  # noqa: E501


        :return: The window of this InputWindowRangeConfig.  # noqa: E501
        :rtype: RangeInt
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this InputWindowRangeConfig.


        :param window: The window of this InputWindowRangeConfig.  # noqa: E501
        :type: RangeInt
        """

        self._window = window

    @property
    def shift(self):
        """Gets the shift of this InputWindowRangeConfig.  # noqa: E501


        :return: The shift of this InputWindowRangeConfig.  # noqa: E501
        :rtype: RangeInt
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this InputWindowRangeConfig.


        :param shift: The shift of this InputWindowRangeConfig.  # noqa: E501
        :type: RangeInt
        """

        self._shift = shift

    @property
    def step(self):
        """Gets the step of this InputWindowRangeConfig.  # noqa: E501


        :return: The step of this InputWindowRangeConfig.  # noqa: E501
        :rtype: RangeInt
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this InputWindowRangeConfig.


        :param step: The step of this InputWindowRangeConfig.  # noqa: E501
        :type: RangeInt
        """

        self._step = step

    @property
    def aggregation_types(self):
        """Gets the aggregation_types of this InputWindowRangeConfig.  # noqa: E501


        :return: The aggregation_types of this InputWindowRangeConfig.  # noqa: E501
        :rtype: list[AggregationType]
        """
        return self._aggregation_types

    @aggregation_types.setter
    def aggregation_types(self, aggregation_types):
        """Sets the aggregation_types of this InputWindowRangeConfig.


        :param aggregation_types: The aggregation_types of this InputWindowRangeConfig.  # noqa: E501
        :type: list[AggregationType]
        """

        self._aggregation_types = aggregation_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputWindowRangeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InputWindowRangeConfig):
            return True

        return self.to_dict() != other.to_dict()
