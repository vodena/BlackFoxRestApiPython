# coding: utf-8

"""
    BlackFox

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import blackfox_restapi
from blackfox_restapi.models.xg_boost_optimization_config import XGBoostOptimizationConfig  # noqa: E501
from blackfox_restapi.rest import ApiException

class TestXGBoostOptimizationConfig(unittest.TestCase):
    """XGBoostOptimizationConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test XGBoostOptimizationConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = blackfox_restapi.models.xg_boost_optimization_config.XGBoostOptimizationConfig()  # noqa: E501
        if include_optional :
            return XGBoostOptimizationConfig(
                dataset_id = '0', 
                inputs = [
                    blackfox_restapi.models.input_config.InputConfig(
                        range = None, 
                        is_optional = True, )
                    ], 
                output_ranges = [
                    blackfox_restapi.models.range.Range(
                        min = 1.337, 
                        max = 1.337, )
                    ], 
                validation_split = 1.337, 
                random_seed = 56, 
                problem_type = Regression, 
                binary_optimization_metric = ROCAUC, 
                n_estimators = None, 
                max_depth = None, 
                min_child_weight = None, 
                gamma = None, 
                subsample = None, 
                colsample_bytree = None, 
                reg_alpha = None, 
                learning_rate = None, 
                engine_config = None
            )
        else :
            return XGBoostOptimizationConfig(
                n_estimators = None,
                max_depth = None,
                min_child_weight = None,
                gamma = None,
                subsample = None,
                colsample_bytree = None,
                reg_alpha = None,
                learning_rate = None,
        )

    def testXGBoostOptimizationConfig(self):
        """Test XGBoostOptimizationConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
